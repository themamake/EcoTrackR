
#--------------------------------------------------Import Packages-------------------------------------------------- tetetet

import streamlit as st
from geopy.geocoders import Nominatim
from geopy import distance
import folium
from streamlit_folium import folium_static


#--------------------------------------------------Config Page--------------------------------------------------

st.set_page_config(
                   initial_sidebar_state= "expanded" , 
                   page_title="Dashboard Pi√©zom√©trique", 
                   page_icon="üìä",
                   layout='centered')
#--------------------------------------------------Police-------------------------------------------------------

st.markdown("""
    <style>
        * {
            font-family: Avenir Next, sans-serif !important;
        }
    </style>
    """, unsafe_allow_html=True)


#--------------------------------------------------background----------------------------------------------------  

page_bg_img = f"""
<style>
[data-testid="stAppViewContainer"] > .main {{
background-image: url("https://images.unsplash.com/photo-1524055988636-436cfa46e59e");
background-size:cover;
background-position: center;
background-repeat: no-repeat;
background-attachment: local;
}}

[data-testid="stSidebar"] > div:first-child {{
background-color: #99b247;
background-size:cover;
background-position:center; 
background-repeat: no-repeat;
}}

.main .block-container{{
background-color: rgba(255, 255, 255, 0.95);  /* Fond blanc avec 95% d'opacit√© */
border-radius: 10px; 
padding: 2rem; 
}}

.stSidebar {{
background-color: rgba(255, 255, 255, 0.95);  /* Fond blanc avec 95% d'opacit√© pour la barre lat√©rale */
}}

[data-testid="stHeader"] {{
background: rgba(0,0,0,0);
}}

[data-testid="stToolbar"] {{
right: 2rem;
}}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)



#--------------------------------------------------Fonctions--------------------------------------------------

def get_bbox_around_city(city, distance_km):
    """ Fonction permettant de definir une bbox autour de la localit√© choisie en fonction du nombre de km defini par l utilisateur"""
    if not city or city=="":
        st.info("Veuillez saisir le nom d'une ville dans la barre lat√©rale.")
        return None
    geolocator = Nominatim(user_agent="geoapiExercises")
    location = geolocator.geocode(city)
    if not location:
        st.error("Impossible de trouver la localisation de la ville.")
        return None
    center_point = (location.latitude, location.longitude)
    radius = distance.distance(kilometers=distance_km)
    # Calcul des coordonn√©es de la bo√Æte de g√©olocalisation
    radius.destination(point=center_point, bearing=0)
    northeast = radius.destination(point=center_point, bearing=45)
    southwest = radius.destination(point=center_point, bearing=225)
    bbox = (southwest.longitude, southwest.latitude, northeast.longitude, northeast.latitude)
    return bbox


#----------------------------------------------Dashboard--------------------------------------------------

def main( ):

    with st.container():

    # Layout avec logo et titre
        col1, col2 = st.columns([4, 1])
        with col2:
            st.image("logo.png", width=250) 

    # Presentation de l'application
        st.write("Bienvenue dans l'application EcoTrack'R - Suivi de la Ressource Eau")
        st.write("EcoTrack'R est une plateforme interactive con√ßue pour vous fournir des informations essentielles sur l'√©tat de la ressource en eau dans votre r√©gion. Nous sommes d√©termin√©s √† sensibiliser le public √† l'importance de pr√©server nos ressources en eau et √† comprendre les impacts du changement climatique.")
        
        st.write("üåä **Niveaux des nappes phr√©atiques** : Suivez l'√©volution des niveaux d'eau souterraine dans votre ville et sa r√©gion. Comprenez les tendances et les variations saisonni√®res.")
        st.write("üíß **D√©bits des cours d'eau** : Acc√©dez aux donn√©es en temps r√©el sur les d√©bits des rivi√®res locales. Identifiez les changements de d√©bit et leur impact sur l'√©cosyst√®me.")
        st.write("üö∞ **Qualit√© de l'eau potable** : Restez inform√© sur la qualit√© de l'eau potable dans votre zone. D√©couvrez les analyses et les √©ventuels probl√®mes de contamination.")
        st.write("üå°Ô∏è **Temp√©rature des cours d'eau** : Explorez les donn√©es de temp√©rature des rivi√®res et des cours d'eau. Analysez les variations et leur corr√©lation avec les conditions environnementales.")
        st.write("üêü **Esp√®ces de poissons observ√©s** : D√©couvrez les zones de reproduction et de vie des poissons dans votre r√©gion. Apprenez comment ces espaces sont affect√©s par les changements environnementaux.")
        st.write("\n\n")

        st.write("En utilisant EcoTrack'R, vous aurez acc√®s √† des informations d√©taill√©es, des graphiques interactifs et des analyses approfondies pour mieux comprendre l'√©tat de votre environnement aquatique. Notre objectif est de vous fournir les connaissances n√©cessaires pour agir de mani√®re inform√©e et contribuer √† la pr√©servation de nos pr√©cieuses ressources en eau.")
        
        st.write("Explorez, apprenez et devenez un d√©fenseur de notre ressource la plus pr√©cieuse - l'eau.")

        st.write("\n\n")
    
    # Formulaire de recherche dans la barre lat√©rale
    with st.sidebar:  
        st.subheader("S√©lectionnez votre zone de recherche")
        if "ville" not in st.session_state:
            st.session_state["ville"] = ""
        if "rayon_km" not in st.session_state:
            st.session_state["rayon_km"] = 1
            
    # Selection de la ville et du rayon de recherche
        ville = st.text_input("Entrez le nom d'une ville francaise : ", st.session_state["ville"])
        rayon_km = st.slider("Entrez le rayon de la bo√Æte de g√©olocalisation en kilom√®tres :", 1, 50, int(st.session_state["rayon_km"]))
    # D√©finition de la boite de g√©olocalisation autour de la ville recherch√©e 
        bbox = get_bbox_around_city(ville, rayon_km)
        submit = st.button("Rechercher")
    
    # Gestions des erreurs    
        if submit:
            try:  # Block pour capturer les erreurs
                geolocator = Nominatim(user_agent="geoapiExercises")
                preliminary_location = geolocator.geocode(ville)

                # Si la ville n'est pas trouv√©e
                if not preliminary_location:
                    st.error("Ville non trouv√©e. Veuillez rentrer un autre nom de ville.")
                    return
                
                # Si la ville est trouv√©e mais n'est pas en France
                elif "France" not in preliminary_location.address:
                    st.error("Le service n'est disponible que pour la France. Veuillez rentrer une localit√© fran√ßaise.")
                    return
                
    # Enregistrement des donn√©es dans la session
                st.session_state["ville"] = ville
                st.session_state["rayon_km"] = rayon_km
                st.session_state["bbox"] = bbox
                st.write("Vous avez s√©lectionn√©", ville, "et un rayon de: ", rayon_km, "km")
                st.session_state["rayon_km"] = rayon_km
                
                
    # Si la ville existe et est en France : affichage de la carte
                location = geolocator.geocode(f"{ville}, France")
                m = folium.Map(location=[location.latitude, location.longitude], zoom_start=9)
                folium.Circle(
                    radius=rayon_km*1000,
                    location=[location.latitude, location.longitude],
                    color="blue",
                    fill=True,
                ).add_to(m)
                folium_static(m, height = 420, width = 420)
                
                st.info("Vous pouvez desormais naviguer dans les differents onglets de l'application afin d'explorer les donn√©es de votre region.")
     # Gestion d'erreurs inattendues pour aider √† diagnostiquer le probl√®me.
            except Exception as e:
                st.error(f"Une erreur s'est produite : {e}")
    

if __name__ == "__main__":
    main()
