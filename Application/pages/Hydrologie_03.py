#--------------------------------------------------Import Packages--------------------------------------------------

import requests
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import plotly.graph_objects as go
import streamlit as st
from streamlit import cache
from streamlit_folium import folium_static
import folium
from geopy.geocoders import Nominatim
from geopy import distance
import datetime
from datetime import datetime
import calendar
import locale


#--------------------------------------------------Config Page--------------------------------------------------

st.set_page_config(
                   initial_sidebar_state= "expanded" , 
                   page_title="Dashboard Hydrologique", 
                   page_icon="üìä",
                   layout='centered')

#--------------------------------------------------Police-------------------------------------------------------

st.markdown("""
    <style>
        * {
            font-family: Avenir Next, sans-serif !important;
        }
    </style>
    """, unsafe_allow_html=True)


#--------------------------------------------------background----------------------------------------------------   
page_bg_img = f"""
<style>
[data-testid="stAppViewContainer"] > .main {{
background-image: url("https://images.unsplash.com/photo-1524055988636-436cfa46e59e");
background-size:60%;
background-position: right;
background-repeat: no-repeat;
background-attachment: fixed;
}}



[data-testid="stSidebar"] > div:first-child {{
background-color: #99b247;
background-size:cover;
background-position:center; 
background-repeat: no-repeat;
}}

.main .block-container{{
background-color: rgba(255, 255, 255, 0.95);  /* Fond blanc avec 95% d'opacit√© */
border-radius: 10px; 
padding: 2rem; 
}}

.stSidebar {{
background-color: rgba(255, 255, 255, 0.95);  /* Fond blanc avec 95% d'opacit√© pour la barre lat√©rale */
}}

[data-testid="stHeader"] {{
background: rgba(0,0,0,0);
}}

[data-testid="stToolbar"] {{
right: 2rem;
}}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

#--------------------------------------------------Fonctions--------------------------------------------------

def convert_date_format(date_str):
    " Fonction permettant de convertir une date au format AAAA-MM-JJ en JJ-MM-AAAA"
    return datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime('%d-%m-%Y')
#_______

def get_Hydrometric_stations_in_bbox(bbox):
    """ 
    Ce service permet d'interroger les stations du r√©f√©rentiel hydrom√©trique. Une station peut porter des observations de hauteur et/ou de d√©bit (directement mesur√©s ou calcul√©s √† partir d'une courbe de tarage).
    Si la valeur du param√®tre size n'est pas renseign√©e, la taille de page par d√©faut : 1000, taille max de la page : 10000.
    La profondeur d'acc√®s aux r√©sultats est : 20000, calcul de la profondeur = num√©ro de la page * nombre maximum de r√©sultats dans une page.
    Trie par d√©faut : code_station asc
    """
    url = "https://hubeau.eaufrance.fr/api/v1/hydrometrie/referentiel/stations?"
    params = {"bbox": bbox, "size": "100"}  # Nombre maximal de stations √† r√©cup√©rer
    response = requests.get(url, params=params)
    # V√©rifier si la requ√™te a r√©ussi
    if response.status_code == 200 or response.status_code == 206:
        contenu = response.json()
    # V√©rifier si la r√©ponse contient des donn√©es
        if "data" not in contenu or len(contenu["data"]) == 0:
            print("Il n'y a pas de stations Hydrologique dans la zone de recherche.")
            return None    
    # Filtrer les stations dont le champ 'en_service' est √† True
        data = [{
            "code_station": x["code_station"],
            "libelle_station": x["libelle_station"],
            "commune": x["libelle_commune"],
            "dep" : x["code_departement"],
            "date_ouverture_station": x["date_ouverture_station"],
            "date_maj_station": x["date_maj_station"],
            "en_service": x["en_service"],
            "date_fermeture_station": x["date_fermeture_station"],
            "libelle_cours_eau": x["libelle_cours_eau"],
            "coordonn√©es": [x["longitude_station"], x["latitude_station"]]
        } for x in contenu["data"] if x["en_service"]] 
        nbre_station = len(data)
        resumed_info = {"nbre_station": nbre_station}
        resumed_info.update({ "data": data})
        if len(data) == 0:
            print("Il n'y a pas de stations pi√©zom√©triques dans la zone de recherche.")
        return resumed_info
    else:
        print("Erreur lors de la requ√™te API:", response.status_code)
#_______

def plot_stations_on_map(stations,bbox,choix_station, ville):
    """ Cette fonction permet de tracer les stations sur une carte Folium. """
# Cr√©ation de la carte centr√©e sur le centre de la bo√Æte de g√©olocalisation
    west = float(bbox[0])
    south = float(bbox[1])
    east = float(bbox[2])
    north = float(bbox[3])
    center_lat = (north + south) / 2
    center_lon = (east + west) / 2
    map_center = [center_lat, center_lon]
    my_map = folium.Map(location=map_center, zoom_start=10)#, width=1075, height=400)
# Ajout du marqueur pour la ville recherch√©e
    geolocator = Nominatim(user_agent="geoapiExercises")
    location = geolocator.geocode(ville)
    if location:
        folium.Marker(location=[location.latitude, location.longitude], popup=ville, icon=folium.Icon(color='green'), sticky=True).add_to(my_map)
# Ajout des marqueurs pour chaque station
    for station in stations['data']:
        station_name = station['code_station']
        station_location = [station['coordonn√©es'][1], station['coordonn√©es'][0]]
        if station_name == choix_station:
            color = 'red'  # Couleur pour la station choisie
        else:
            color = 'blue'  # Couleur pour les autres stations
        folium.Marker(location=station_location, popup=station_name, icon=folium.Icon(color=color), sticky=True).add_to(my_map)
# Affichage de la carte
    return my_map
#_______

@st.cache_data()
def get_api_debit(code_station):
    """
    cette fonction permet de lister les observations dites "temps r√©el" port√©es par le r√©f√©rentiel (sites et stations hydrom√©triques), √† savoir les s√©ries de donn√©es de hauteur d'eau (H) et de d√©bit (Q).
    Si la valeur du param√®tre size n'est pas renseign√©e, la taille de page par d√©faut : 1000, taille max de la page : 20000.
    Il n'y a pas de limitation sur la profondeur d'acc√®s aux r√©sultats.
    Trie par d√©faut : date_obs desc
    """
    url = "http://hubeau.eaufrance.fr/api/v1/hydrometrie/observations_tr"
    params = {"code_entite": code_station, "size": 20000}
    # R√©cup√©rer les donn√©es
    response = requests.get(url, params=params)
    # V√©rifier si la requ√™te a r√©ussi
    if response.status_code == 200 or response.status_code == 206:
        contenu = response.json()
        
    # Filtrage des donn√©es pour ne garder que celles o√π grandeur_hydro est 'H' (hauteur d'eau) 
        filtered_data = [{"date_mesure": observation["date_obs"], "D√©bit": observation["resultat_obs"]} 
                         for observation in contenu['data'] 
                        if observation['grandeur_hydro'] == 'Q']
        return filtered_data
    else:
        print("Erreur lors de la r√©cup√©ration des donn√©es. Statut de la r√©ponse:", response.status_code)
#_______

def historique_recent(code_station):
    """ Cette fonction permet de tracer l'historique r√©cent du d√©bit d'une station hydrom√©trique."""
    json_data = get_api_debit(code_station)
    # Convertir les donn√©es en DataFrame
    df = pd.DataFrame(json_data)
    #  Convertir la colonne 'date_mesure' en datetime
    df['date_mesure'] = pd.to_datetime(df['date_mesure'])
    # Convertir la colonne 'D√©bit' en float et diviser par 1000 pour obtenir le d√©bit en m3/s
    df['D√©bit'] = df['D√©bit'].div(1000)
    # Tracer le graphique
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df['date_mesure'], y=df['D√©bit'], mode='lines', name='D√©bit du cours d\'eau'))
    fig.update_layout(xaxis_title='Date de mesure', yaxis_title='D√©bit m3/s')
    fig.update_layout(xaxis=dict(rangeslider=dict(visible=True), type='date'))
    fig.update_layout(
    #autosize=True,  
    width=1075,
    height=400,
    margin=dict(l=0, r=0, t=0, b=0),  # D√©finition des marges du graphique √† 0 pour supprimer la bordure
    paper_bgcolor="rgba(0,0,0,0)",  # D√©finition de la couleur de l'arri√®re-plan du graphique sur transparent
    plot_bgcolor="rgba(0,0,0,0)",  # D√©finition de la couleur de l'arri√®re-plan du trac√© sur transparent
    modebar={'orientation': 'v'}
        )
    return fig
#                                                       --------------------------------------

def get_api_history_debit(code_station):
    """Cette fonction permet de r√©cup√©rer les donn√©es historiques de d√©bit moyen mensuel d'une station hydrom√©trique."""
    url = "http://hubeau.eaufrance.fr/api/v1/hydrometrie/obs_elab"
    params = {"code_entite": code_station,  "grandeur_hydro_elab":"QmM" , "size": 20000}
    # R√©cup√©ration des donn√©es
    response = requests.get(url, params=params)
    # V√©rification du statut de la r√©ponse
    if response.status_code == 200 or response.status_code == 206:
        contenu = response.json()
    # Filtrage des donn√©es pour ne garder que celles o√π grandeur_hydro est 'QmM' et extraction seulement de la date et du r√©sultat
        filtered_data = [{"date_mesure": observation["date_obs_elab"], "QmM": observation["resultat_obs_elab"]} 
                         for observation in contenu['data']]
        return filtered_data
    else:
        print("Erreur lors de la r√©cup√©ration des donn√©es. Statut de la r√©ponse:", response.status_code)
#_______

def charger_donnees_historique(code_station):
    """ Cette fonction permet de charger les donn√©es historiques de d√©bit d'une station hydrom√©trique."""
    json_data = get_api_history_debit(code_station)
    df_history = pd.DataFrame(json_data)
    # Convertir la colonne 'date_mesure' en datetime
    df_history['date_mesure'] = pd.to_datetime(df_history['date_mesure'])
    # Convertir la colonne 'D√©bit' en float et diviser par 1000 pour obtenir le d√©bit en m3/s
    df_history['QmM'] = df_history['QmM'].div(1000)
    return df_history
#_______

def get_statistics_by_month(df_historique):
    """Fonction qui calcule les statistiques par mois  du d√©bit moyen mensuel"""
    # D√©finir la localisation en fran√ßais
    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
    # Convertir la colonne de date en datetime
    df_historique['date_mesure'] = pd.to_datetime(df_historique['date_mesure'])
    # Extraire le mois et l'ann√©e de la colonne de date
    df_historique['month'] = df_historique['date_mesure'].dt.month
    df_historique['year'] = df_historique['date_mesure'].dt.year
    # Calculer les statistiques par mois
    statistics_by_month = round(df_historique.groupby('month')['QmM'].agg(['min', 'max', 'mean', 'median',lambda x: np.percentile(x, 25), lambda x: np.percentile(x, 75)]),2).reset_index()
    # Convertir le num√©ro du mois en nom de mois en fran√ßais
    statistics_by_month['month'] = statistics_by_month['month'].apply(lambda x: calendar.month_name[x].capitalize())
    # Renommer les colonne "<lambda>" en "1er  et 3eme quartile"
    statistics_by_month.rename(columns={statistics_by_month.columns[5]: '1er_quartile'}, inplace=True)
    statistics_by_month.rename(columns={statistics_by_month.columns[6]: '3eme_quartile'}, inplace=True)
    return statistics_by_month
#_______

def plot_quartile_median(df_historique,statistics_by_month, year):
    """Fonction permettant de tracer les graphiques d'aire 2D du 1er quartile, de la m√©diane et du 3√®me quartile. """
    # D√©finir la localisation en fran√ßais
    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
    # Verification que la colonne de date est bien de type 'datetime'
    df_historique['date_mesure'] = pd.to_datetime(df_historique['date_mesure'])
    # Extraction du mois et de l'ann√©e de la colonne de date
    df_historique['month'] = df_historique['date_mesure'].dt.month
    df_historique['year'] = df_historique['date_mesure'].dt.year
    # Calcl de  la moyenne par mois pour l'ann√©e en cours
    df_year_mean = df_historique[(df_historique['year'] == year)].groupby('month')['QmM'].mean().reset_index()
    # Utiliser le style seaborn
    sns.set(style="whitegrid", palette="pastel")
    # Tracer les graphiques d'aire 2D du 1er quartile, de la m√©diane et du 3√®me quartile
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.fill_between(statistics_by_month['month'], statistics_by_month['1er_quartile'], statistics_by_month['3eme_quartile'], alpha=0.5, label='Quartiles')
    ax.fill_between(statistics_by_month['month'], statistics_by_month['min'], statistics_by_month['max'], alpha=0.2, color='pink', label='Extremes')
    ax.plot(statistics_by_month['month'], statistics_by_month['median'], label='M√©diane', marker='', color='royalblue')
    ax.scatter(df_year_mean['month'].apply(lambda x: calendar.month_name[x].capitalize()), df_year_mean['QmM'], color='red', label=f'Moyenne {year}', marker='o')
    ax.set_xlabel('Mois')
    ax.set_ylabel('D√©bits (m3/s)')
    ax.set_title(f'√âvolution des debits mesur√©s sur la station pour l\'ann√©e {year}')
    ax.legend()
    ax.set_xticklabels(statistics_by_month['month'], rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

#_______

def top_10_lowest_average(df_historique):
    """ Fonction permettant de calculer le top 10 des ann√©es avec le debit moyen le plus bas"""""
    # Calculer la moyenne par ann√©e
    df_yearly_mean = round(df_historique.groupby(df_historique['date_mesure'].dt.year)['QmM'].mean(),1).reset_index()
    # Convertir les ann√©es en cha√Ænes de caract√®res pour √©viter le formatage par milliers de Streamlit
    df_yearly_mean['date_mesure'] = df_yearly_mean['date_mesure'].astype(str)
    # Convertir la colonne 'QmM' en cha√Æne de caract√®res
    df_yearly_mean['QmM'] = df_yearly_mean['QmM'].astype(str)
    # Trier par ordre croissant
    df_yearly_mean_sorted = df_yearly_mean.sort_values('QmM')
    # S√©lectionner les 10 premi√®res ann√©es avec le niveau moyen le plus bas
    top_10_years = df_yearly_mean_sorted.head(10)
    # R√©initialiser l'index pour obtenir le classement de 1 √† 10 et ajouter +1 car l'index commence par 0 par d√©faut
    top_10_years = top_10_years.reset_index(drop=True)
    top_10_years.index = top_10_years.index + 1
    return top_10_years
#_______

def top_10_highest_average(df_historique):
    """ Fonction permettant de calculer le top 10 des ann√©es avec le debit moyen le plus √©lev√©"""
    # Calculer la moyenne par ann√©e
    df_yearly_mean = round(df_historique.groupby(df_historique['date_mesure'].dt.year)['QmM'].mean(),1).reset_index()
    # Convertir les ann√©es en cha√Ænes de caract√®res pour √©viter le formatage par milliers de Streamlit
    df_yearly_mean['date_mesure'] = df_yearly_mean['date_mesure'].astype(str)
    # Convertir la colonne 'QmM' en cha√Æne de caract√®res
    df_yearly_mean['QmM'] = df_yearly_mean['QmM'].astype(str)
    # Trier par ordre d√©croissant
    df_yearly_mean_sorted = df_yearly_mean.sort_values('QmM', ascending=False)
    # S√©lectionner les 10 premi√®res ann√©es avec le niveau moyen le plus √©lev√©
    top_10_years = df_yearly_mean_sorted.head(10)
    # R√©initialiser l'index pour obtenir le classement de 1 √† 10 et ajouter +1 car l'index commence par 0 par d√©faut
    top_10_years = top_10_years.reset_index(drop=True)
    top_10_years.index = top_10_years.index + 1
    return top_10_years
#_______

def graph_hystory_complete(df):
    fig = go.Figure()
    #fig.add_trace(go.Scatter(x=df['date_mesure'], y=df['profondeur_nappe'], mode='lines', name='Profondeur de nappe'))
    fig.add_trace(go.Scatter(x=df['date_mesure'], y=df['QmM'], mode='lines', name='D√©bit moyen mensuel'))
    fig.update_layout(
    autosize=True,  # Utilisez l'espace disponible
    # width=1075,
    # height=400,
    margin=dict(l=0, r=0, t=0, b=0),  # D√©finissez les marges du graphique √† 0 pour supprimer la bordure
    paper_bgcolor="rgba(0,0,0,0)",  # D√©finissez la couleur de l'arri√®re-plan du graphique sur transparent
    plot_bgcolor="rgba(0,0,0,0)",  # D√©finissez la couleur de l'arri√®re-plan du trac√© sur transparent
    modebar={'orientation': 'v'}
        )
    fig.update_layout(xaxis_title='Date de mesure', yaxis_title='Niveau') #/ Profondeur')
    fig.update_layout(xaxis=dict(rangeslider=dict(visible=True), type='date'))
    # fig.show()
    st.plotly_chart(fig)
    

#--------------------------------------------------Dashboard--------------------------------------------------


def main():
    # Titre de la page
    st.markdown("<h2 style='text-align: center; color: black; font-size: 36px;'>Relev√©s Hydrometriques</h2>", unsafe_allow_html=True)
    
    # Verification que la ville, le rayon et la bbox sont bien d√©finis
    ville = st.session_state.get("ville", None)
    rayon_km = st.session_state.get("rayon_km", None)
    bbox = st.session_state.get("bbox", None)
    
    if not (ville and rayon_km and bbox):
        # Display an error message
        st.error("Veuillez vous rendre sur la page d'accueil afin de choisir une Localit√©.")
        return  # Exit the function
    
    # Initialisation des variables stations et choix_station
    stations = None 
    choix_station = None 
    # R√©cup√©ration des stations hydrom√©triques dans la bo√Æte de g√©olocalisation
    if bbox:
        stations = get_Hydrometric_stations_in_bbox(bbox)
        if stations and stations['data']:
            st.success("Stations r√©cup√©r√©es avec succ√®s !")
            
    # Cr√©ation d'une liste d'options pour le selectbox
            #options = [(x['libelle_station'], x['code_station']) for x in stations["data"]]
            options = [(f"{x['libelle_station']} - {x['code_station']}", x['code_station']) for x in stations["data"]]
            labels = [option[0] for option in options]
            proposition = st.sidebar.radio("Choisissez une station :", labels)
            # R√©cup√©rer la valeur de 'code_station' associ√©e au libell√© choisi
            choix_station = next(value for label, value in options if label == proposition)

    # Afficher la carte avec les stations
            my_map = plot_stations_on_map(stations, bbox, choix_station,ville)
            folium_static(my_map)#, width=1075, height=400)
            # Afficher la l√©gende de la carte
            st.markdown("""
            <div style='text-align: center;'>
                <span style='font-size: 12px; color: black;'>
                    <span style='color: #72b026; font-size: 24px; vertical-align: middle;'>‚Ä¢</span>: Ville choisie &nbsp;&nbsp;&nbsp;&nbsp;
                    <span style='color: #38aadd; font-size: 24px; vertical-align: middle;'>‚Ä¢</span>: Stations disponibles &nbsp;&nbsp;&nbsp;&nbsp;
                    <span style='color: red; font-size: 24px; vertical-align: middle;'>‚Ä¢</span>: Station s√©lectionn√©e
                </span>
            </div>
            """, unsafe_allow_html=True)
            
            st.write("Il y a", stations['nbre_station'], "stations dans la bo√Æte de g√©olocalisation.",
                        style="margin-top: -100px;")
            st.info("""Les stations hydrom√©triques jouent un r√¥le essentiel dans la surveillance et la gestion des ressources en eau d'un pays ou d'une r√©gion. 
                     Ces stations sont sp√©cialement con√ßues pour mesurer le d√©bit des rivi√®res, des cours d'eau et des canaux.  
                     Le d√©bit est une mesure du volume d'eau qui s'√©coule √† travers une section de la rivi√®re par unit√© de temps, g√©n√©ralement exprim√© en m√®tres cubes par seconde (m¬≥/s).
                     Le d√©bit des rivi√®res peut varier en fonction des pr√©cipitations, de la fonte des neiges, des barrages, des retraits pour l'irrigation ou d'autres utilisations, 
                     et m√™me des interventions humaines comme les d√©rivations ou les rejets. Surveiller ces variations est donc crucial pour optimiser la gestion des ressources en eau
                    prevenir les innondations ou proteger les ecosyst√®mes aquatiques.""")
        else:
            st.warning("Aucune station pi√©zom√©trique trouv√©e dans la bo√Æte de g√©olocalisation.")
            
    # R√©cup√©ration des donn√©es r√©centes de niveau de la nappe
    if stations and choix_station:
        data = get_api_debit(choix_station)
        if not data:   #  si data est une liste vide
            st.warning("Pas de mesure disponible durant les 30 derniers jours, veuillez choisir une autre station.")
        else:
            st.header("Mesures recentes de la station")
            fig= historique_recent(choix_station)
            st.plotly_chart(fig, use_container_width=True)
            st.write("üìä **√Ä propos de la tendance :**")
            st.info("Ce graphique illustre les donn√©es les plus r√©centes concernant la station que vous avez s√©lectionn√©e.") 
        
            
    # Afficher les informations sur la station dans la sidebar
        for station in stations['data']:
            if station['code_station'] == choix_station:
                st.sidebar.markdown("---")  # Ajout d'une ligne horizontale
                st.sidebar.markdown(f"**Informations sur la station :** {choix_station}")
                # Reformater les dates
                date_ouverture = datetime.strptime(station['date_ouverture_station'], '%Y-%m-%dT%H:%M:%SZ').strftime('%d-%m-%Y')
                date_maj = datetime.strptime(station['date_maj_station'], '%Y-%m-%dT%H:%M:%SZ').strftime('%d-%m-%Y')
                info_text = f"""
                **D√©partement :** {station['dep']}  
                **Commune :** {station['commune']}  
                **Cours d'eau:** {station["libelle_cours_eau"]}  
                **Date de d√©but de mesure :** {date_ouverture}  
                **Date de mise √† jour de la station:** {date_maj}   
                **Coordonn√©es :** {station['coordonn√©es']}  
                    """
                st.sidebar.markdown(info_text)
                break
            
#### Tendance a long terme ####

    # Initialisation de l'√©tat du bouton
    if 'bouton_historique_hydro' not in st.session_state:
        st.session_state['bouton_historique_hydro'] = False 
        
    # Si la ville a chang√©, r√©initialisation de l'√©tat du bouton
    if st.session_state.get('previous_ville') != ville:
        st.session_state['bouton_historique_hydro'] = False
    st.session_state['previous_ville'] = ville  # Mettre √† jour la valeur de la ville pr√©c√©dente    
    
    # Si le rayon_km a chang√©, r√©initialisation de l'√©tat du bouton
    if st.session_state.get('previous_rayon_km') != rayon_km:
        st.session_state['bouton_historique_hydro'] = False
    st.session_state['previous_rayon_km'] = rayon_km  # Mettre √† jour la valeur du rayon pr√©c√©dent 
            
            
    # Bouton "Historique des mesures de la station"       
    with st.sidebar:
        if st.sidebar.button("Plus d'information sur le point de mesure"):
            st.session_state['bouton_historique_hydro'] = True

    # Bouton "Historique des mesures de la station"
    if st.session_state['bouton_historique_hydro']:
        st.header("Tendance √† long terme ", choix_station)
        
        data= get_api_history_debit(choix_station)
        if not data:   #  si data est une liste vide
            st.warning("Pas d'historique disponible, veuillez choisir une autre station.")
        else:
        # Chargement des donn√©es dans un DataFrame
            df_historique = charger_donnees_historique(choix_station)
            statistics_by_month = get_statistics_by_month(df_historique)

            # S√©lectionner une ann√©e
            selected_year = None
            years = sorted(df_historique['year'].unique(), reverse=True)
            selected_year =st.selectbox("S√©lectionnez une ann√©e pour comparer son profil √† l'ensemble des donn√©es", years)
            
            if selected_year:
                plot_quartile_median(df_historique,statistics_by_month, selected_year)
                st.write("üìä **En observant ce graphique, vous pouvez :**")

                st.info("- Saisir les **Tendances Mensuelles** : Voyez comment la ligne m√©diane se d√©place d'un mois √† l'autre. Une ligne ascendante indique une augmentation du d√©bit du cours d'eau, tandis qu'une ligne descendante indique une baisse.\n"
                    "\n"
                    "- Comprendre la **Variabilit√©** : La largeur de la zone interquartile (zone bleue) montre √† quel point les d√©bits varient. Une zone plus large indique une plus grande variabilit√©.\n"
                    "\n"
                    "- Identifier les **P√©riodes Anormales** : Rep√©rez les p√©riodes o√π les debits sont exceptionnellement bas ou √©lev√©s, indiqu√©es par des valeurs en dehors ou proche de la zone des extr√™mes.\n"
                    "\n"
                    "- Comparer aux **Moyennes** : Les points rouges marquent les moyennes mensuelles. Comparez-les avec la m√©diane pour comprendre si les valeurs sont g√©n√©ralement plus √©lev√©es ou plus basses que la moyenne.\n"
                    "\n"
                    "Ces indices vous offrent une meilleure compr√©hension des sch√©mas de variation des debits d un cours d'eau. Ils vous aident √† d√©crypter les fluctuations et les conditions g√©n√©rales de l'eau de surface tout au long de l'ann√©e.")
                

                st.write("\n\n")
                st.header("La station " + choix_station + " en chiffres...")
                st.write("\n\n")
            
            cola, colb= st.columns([1,1])
            with cola:
                st.write("üìä **Top 10 des ann√©es les plus seches**")
                top_10_lowest = top_10_lowest_average(df_historique)
                st.dataframe(top_10_lowest)
            with colb:
                st.write("üìä **Top 10 des ann√©es les plus humides**")
                top_10_highest= top_10_highest_average(df_historique)
                st.dataframe(top_10_highest)
            st.write("\n\n")
            
            st.write("üìä **Statistiques mensuelles**")
            # Convertir les colonnes num√©riques concern√©es en cha√Ænes de caract√®res
            df_display = statistics_by_month.copy()
            for column in ['min', 'max', 'mean', 'median', '1er_quartile', '3eme_quartile']:
                df_display[column] = df_display[column].astype(str)
            st.dataframe(df_display)
            
            st.write("\n\n")
            if st.button("Voir l'historique complet du point de mesure"):
                graph_hystory_complete(df_historique)    
            
               
            
if __name__ == "__main__":
    main()
